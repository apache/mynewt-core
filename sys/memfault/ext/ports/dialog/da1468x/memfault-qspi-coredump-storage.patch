From ad835b23a3476ed770e21de8a1a13fe1b57c78f9 Mon Sep 17 00:00:00 2001
From: Memfault Inc <hello@memfault.com>
Date: Thu, 1 Apr 2021 17:24:41 -0400
Subject: [PATCH] Enable saving of coredumps in QSPI

* Introduces dg_configMEMFAULT & enables by default. Memfault
  modifications can be disabled by adding #define dg_configMEMFAULT 0
  to projects custom_config*.h
* Disables fault handlers in startup_ARMCM0.S so Memfault handlers can
  be picked up and coredumps can be collected
* Updates ad_nvms/_flash driver to work from ISRs
* Update FreeRTOSConfig.h so memfault sdk can monitor and capture task
  state

---
 sdk/bsp/adapters/src/ad_flash.c            | 17 +++++++++++++++++
 sdk/bsp/adapters/src/ad_nvms_direct.c      | 29 ++++++++++++++++++++++
 sdk/bsp/config/bsp_defaults.h              |  5 ++++
 sdk/bsp/free_rtos/include/FreeRTOSConfig.h |  4 +++
 sdk/bsp/startup/startup_ARMCM0.S           |  4 ++-
 sdk/bsp/system/sys_man/sys_power_mgr.c     |  7 ++++++
 5 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/sdk/bsp/adapters/src/ad_flash.c b/sdk/bsp/adapters/src/ad_flash.c
index f6a70f7..4be0497 100644
--- a/sdk/bsp/adapters/src/ad_flash.c
+++ b/sdk/bsp/adapters/src/ad_flash.c
@@ -47,6 +47,17 @@ PRIVILEGED_DATA static OS_MUTEX flash_mutex;
 PRIVILEGED_DATA static uint32_t no_cache_flush_base;
 PRIVILEGED_DATA static uint32_t no_cache_flush_end;
 
+// If an RTOS is in use we need to track the mutex and fail if it's taken.
+// If no RTOS, then assume the flash is never locked.
+#if dg_configMEMFAULT == 1
+#ifndef OS_BAREMETAL
+static uint32_t s_flash_mutex_tracker;
+bool memfault_ad_flash_is_locked(void) { return s_flash_mutex_tracker != 0; }
+#else
+bool memfault_ad_flash_is_locked(void) { return false; }
+#endif
+#endif
+
 static inline bool is_flash_addr_cached(uint32_t addr)
 {
         /*
@@ -244,12 +255,18 @@ void ad_flash_lock(void)
 {
 #ifndef OS_BAREMETAL
         OS_MUTEX_GET(flash_mutex, OS_MUTEX_FOREVER);
+#if (dg_configMEMFAULT == 1)
+        ++s_flash_mutex_tracker;
+#endif
 #endif
 }
 
 void ad_flash_unlock(void)
 {
 #ifndef OS_BAREMETAL
+#if (dg_configMEMFAULT == 1)
+        if (s_flash_mutex_tracker) --s_flash_mutex_tracker;
+#endif
         OS_MUTEX_PUT(flash_mutex);
 #endif
 }
diff --git a/sdk/bsp/adapters/src/ad_nvms_direct.c b/sdk/bsp/adapters/src/ad_nvms_direct.c
index 3c23223..923f602 100644
--- a/sdk/bsp/adapters/src/ad_nvms_direct.c
+++ b/sdk/bsp/adapters/src/ad_nvms_direct.c
@@ -40,6 +40,21 @@
 static PRIVILEGED_DATA OS_MUTEX lock;
 #endif
 
+// If an RTOS is in use we need to track the mutex and fail if it's taken.
+// If no RTOS, then assume the flash is never locked. See ad_flash.c for
+// similar lock tracking for flash writes and erasing.
+#if (dg_configMEMFAULT == 1)
+#ifndef OS_BAREMETAL
+// Not in a header file. Implemented in qspi_coredump_save.h.
+bool memfault_platform_saving_coredump(void);
+
+static uint32_t s_lock_mutex_tracker;
+bool memfault_ad_nvms_direct_is_locked(void) { return s_lock_mutex_tracker != 0; }
+#else
+bool memfault_ad_nvms_direct_is_locked(void) { return 0; }
+#endif
+#endif
+
 static int ad_nvms_direct_read(struct partition_t *part, uint32_t addr, uint8_t *buf,
                                                                                 uint32_t size);
 static int ad_nvms_direct_write(struct partition_t *part, uint32_t addr, const uint8_t *buf,
@@ -150,15 +165,29 @@ static inline uint32_t part_addr(const struct partition_t *part, uint32_t addr)
 static inline void part_lock(struct partition_t *part)
 {
 #ifndef OS_BAREMETAL
+#if (dg_configMEMFAULT == 1)
+        if (!memfault_platform_saving_coredump()) {
+                OS_MUTEX_GET(lock, OS_MUTEX_FOREVER);
+                ++s_lock_mutex_tracker;
+        }
+#else
         OS_MUTEX_GET(lock, OS_MUTEX_FOREVER);
 #endif
+#endif
 }
 
 static inline void part_unlock(struct partition_t *part)
 {
 #ifndef OS_BAREMETAL
+#if (dg_configMEMFAULT == 1)
+        if (!memfault_platform_saving_coredump()) {
+                if (s_lock_mutex_tracker) --s_lock_mutex_tracker;
+                OS_MUTEX_PUT(lock);
+        }
+#else
         OS_MUTEX_PUT(lock);
 #endif
+#endif
 }
 
 /*
diff --git a/sdk/bsp/config/bsp_defaults.h b/sdk/bsp/config/bsp_defaults.h
index 419ea9d..3a57397 100644
--- a/sdk/bsp/config/bsp_defaults.h
+++ b/sdk/bsp/config/bsp_defaults.h
@@ -2140,6 +2140,11 @@
  * \{
  */
 
+/* ----------------------------- Memfault configuration ------------------------------- */
+#ifndef dg_configMEMFAULT
+#define dg_configMEMFAULT             (1)
+#endif
+
 /* ----------------------------- Segger System View configuration ------------------------------- */
 
 /**
diff --git a/sdk/bsp/free_rtos/include/FreeRTOSConfig.h b/sdk/bsp/free_rtos/include/FreeRTOSConfig.h
index 0270fb4..98d700d 100644
--- a/sdk/bsp/free_rtos/include/FreeRTOSConfig.h
+++ b/sdk/bsp/free_rtos/include/FreeRTOSConfig.h
@@ -95,6 +94,10 @@
 #include "hw_watchdog.h"
 #include "sys_clock_mgr.h"
 
+#if (dg_configMEMFAULT == 1)
+#include "memfault/ports/freertos_trace.h"
+#endif
+
 extern uint32_t SystemCoreClock;
 
 #define configUSE_PREEMPTION                    1
diff --git a/sdk/bsp/startup/startup_ARMCM0.S b/sdk/bsp/startup/startup_ARMCM0.S
index e1dfa10..9a3a1a2 100644
--- a/sdk/bsp/startup/startup_ARMCM0.S
+++ b/sdk/bsp/startup/startup_ARMCM0.S
@@ -388,6 +388,8 @@ SVC_Handler:
 	def_irq_handler XTAL16RDY_Handler
 	def_irq_handler RESERVED31_Handler
 
+/* Memfauilt has their own version */
+#if (dg_configMEMFAULT == 0)
 #if (dg_configCODE_LOCATION == NON_VOLATILE_IS_FLASH)
         .section text_retained
 #endif
@@ -477,5 +479,5 @@ Wrong_SP:
         /* Wait for the WDog to hit or a debug session to start */
         b       .
         .size   HardFault_Handler, . - HardFault_Handler
-
+#endif /* (dg_configMEMFAULT == 0) */
 	.end
diff --git a/sdk/bsp/system/sys_man/sys_power_mgr.c b/sdk/bsp/system/sys_man/sys_power_mgr.c
index fa7cd92..4244c94 100644
--- a/sdk/bsp/system/sys_man/sys_power_mgr.c
+++ b/sdk/bsp/system/sys_man/sys_power_mgr.c
@@ -2332,6 +2332,12 @@ bool pm_register_qspi_operation(OS_TASK handle, uint32_t addr, const uint8_t *bu
 {
         qspi_ops *op;
 
+#if (dg_configMEMFAULT == 1)
+        extern bool memfault_platform_saving_coredump(void);
+        if (memfault_platform_saving_coredump()) {
+          return false;
+        }
+#endif
         if (xSemaphorePM == NULL) {
                 ASSERT_WARNING(0);
                 return false;
--
2.31.0

