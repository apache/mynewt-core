From 3cdc23e13aea352856de5f0a794aeabda2c60870 Mon Sep 17 00:00:00 2001
From: Memfault Inc <hello@memfault.com>
Date: Tue, 3 Dec 2019 23:35:57 -0500
Subject: [PATCH] Integrate Memfault Firmware SDK into Zephyr RTOS

* Add 'memfault' module to 'ext/lib/memfault'. To add the SDK, create
  a 'memfault-firmware-sdk' directory to the folder & copy or
  symlink a clone of https://github.com/memfault/memfault-firmware-sdk.git
* Extend Zephyr Fault Handler to store extra register as the exception
  stack frame (using the CONFIG_EXTRA_EXCEPTION_INFO option)
* Add an option to skip clearing of fault status register information
  during exception handling (CONFIG_PERSIST_CFSR_STATE). This information
  can be useful for post-mortem fault analysis
---
 arch/arm/core/cortex_m/Kconfig  | 17 +++++++++++-
 arch/arm/core/cortex_m/fault.c  | 26 ++++++++++++-----
 arch/arm/core/fault_s.S         | 13 ++++++++-
 ext/Kconfig                     |  2 ++
 include/arch/arm/exc.h          | 49 ++++++++++++++++++++++++++-------
 7 files changed, 91 insertions(+), 19 deletions(-)

diff --git a/arch/arm/core/cortex_m/Kconfig b/arch/arm/core/cortex_m/Kconfig
index bd3516ecd0..410bda5fcc 100644
--- a/arch/arm/core/cortex_m/Kconfig
+++ b/arch/arm/core/cortex_m/Kconfig
@@ -75,6 +75,21 @@ config CPU_CORTEX_M7

 if CPU_CORTEX_M

+config EXTRA_EXCEPTION_INFO
+	bool "Enable collection of callee saved register state"
+	help
+	  Enables preserving callee saved registers as part of the
+	  Exception Stack Frame (z_arch_esf_t) provided to fault handlers.
+	  This can be helpful information to collect in order to recover
+	  accurate backtraces for post-mortem analysis.
+
+config PERSIST_CFSR_STATE
+	bool
+	help
+	  Don't clear the Configurable Fault Status Register (CFSR) as
+	  part of the kernel fault handling. This information can be useful
+	  can be helpful to collect for post-mortem analysis.
+
 config CPU_CORTEX_M_HAS_SYSTICK
 	bool
 	# Omit prompt to signify "hidden" option
@@ -122,7 +137,7 @@ config CPU_CORTEX_M_HAS_SPLIM

 	  In an ARMv8-M Mainline implementation with the Security Extension
 	  the MSPLIM, PSPLIM registers have additional Secure instances.
-  	  In an ARMv8-M Baseline implementation with the Security Extension
+	  In an ARMv8-M Baseline implementation with the Security Extension
 	  the MSPLIM, PSPLIM registers have only Secure instances.

 config CPU_CORTEX_M_HAS_PROGRAMMABLE_FAULT_PRIOS
diff --git a/arch/arm/core/cortex_m/fault.c b/arch/arm/core/cortex_m/fault.c
index 7943248368..74d8d433eb 100644
--- a/arch/arm/core/cortex_m/fault.c
+++ b/arch/arm/core/cortex_m/fault.c
@@ -239,8 +239,10 @@ static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
 		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 			if (fromHardFault) {
+#if !defined(CONFIG_PERSIST_CFSR_STATE)
 				/* clear SCB_MMAR[VALID] to reset */
 				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
+#endif
 			}
 		}
 	}
@@ -315,10 +317,10 @@ static u32_t MpuFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
 		"Stacking error without stack guard / User-mode support\n");
 #endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
 	}
-
+#if !defined(CONFIG_PERSIST_CFSR_STATE)
 	/* clear MMFSR sticky bits */
 	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
-
+#endif
 	/* Assess whether system shall ignore/recover from this MPU fault. */
 	*recoverable = memory_fault_recoverable(esf);

@@ -361,7 +363,9 @@ static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
 			PR_EXC("  BFAR Address: 0x%x", bfar);
 			if (fromHardFault) {
 				/* clear SCB_CFSR_BFAR[VALID] to reset */
+#if !defined(CONFIG_PERSIST_CFSR_STATE)
 				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
+#endif
 			}
 		}
 	}
@@ -470,10 +474,10 @@ static int BusFault(z_arch_esf_t *esf, int fromHardFault, bool *recoverable)
 		SYSMPU->CESR &= ~sperr;
 	}
 #endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */
-
+#if !defined(CONFIG_PERSIST_CFSR_STATE)
 	/* clear BFSR sticky bits */
 	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
-
+#endif
 	*recoverable = memory_fault_recoverable(esf);

 	return reason;
@@ -527,10 +531,10 @@ static u32_t UsageFault(const z_arch_esf_t *esf)
 	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 	}
-
+#if !defined(CONFIG_PERSIST_CFSR_STATE)
 	/* clear UFSR sticky bits */
 	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
-
+#endif
 	return reason;
 }

@@ -804,12 +808,20 @@ static void SecureStackDump(const z_arch_esf_t *secure_esf)
  * Note: exc_return argument shall only be used by the Fault handler if we are
  * running a Secure Firmware.
  */
-void _Fault(z_arch_esf_t *esf, u32_t exc_return)
+void _Fault(struct __esf *esfp, u32_t exc_return, struct __callee_saved_esf *callee_regs)
 {
 	u32_t reason = K_ERR_CPU_EXCEPTION;
 	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 	bool recoverable;

+#if defined(CONFIG_EXTRA_EXCEPTION_INFO)
+	z_arch_esf_t esf_copy = { 0 };
+	memcpy(&esf_copy, esfp, sizeof(*esfp));
+	z_arch_esf_t *esf = &esf_copy;
+	esf->exception_frame_addr = esfp;
+	esf->callee_regs = callee_regs;
+#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
+
 #if defined(CONFIG_ARM_SECURE_FIRMWARE)
 	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 			EXC_RETURN_INDICATOR_PREFIX) {
diff --git a/arch/arm/core/fault_s.S b/arch/arm/core/fault_s.S
index 785f49d01a..607b3c27d2 100644
--- a/arch/arm/core/fault_s.S
+++ b/arch/arm/core/fault_s.S
@@ -158,7 +158,18 @@ _s_stack_frame_endif:
 	mov r1, lr
 #endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
 	push {r0, lr}
-	bl _Fault
+
+#if defined(CONFIG_EXTRA_EXCEPTION_INFO)
+        /* push the callee-saved registers on the stack and pass them to _Fault
+         * as part of argument 2
+         */
+        push {r4-r11, lr}
+        mov r2, sp
+#endif
+        bl _Fault
+#if defined(CONFIG_EXTRA_EXCEPTION_INFO)
+        pop {r4-r11, lr}
+#endif

 #if defined(CONFIG_CPU_CORTEX_M)
 	pop {r0, pc}
diff --git a/include/arch/arm/exc.h b/include/arch/arm/exc.h
index dfa1ad8e4a..79da2b2f0f 100644        
--- a/include/arch/arm/exc.h
+++ b/include/arch/arm/exc.h
@@ -44,17 +44,19 @@ GTEXT(z_ExcExit);
 extern "C" {
 #endif

+struct __basic_sf {
+	sys_define_gpr_with_alias(a1, r0);
+	sys_define_gpr_with_alias(a2, r1);
+	sys_define_gpr_with_alias(a3, r2);
+	sys_define_gpr_with_alias(a4, r3);
+	sys_define_gpr_with_alias(ip, r12);
+	sys_define_gpr_with_alias(lr, r14);
+	sys_define_gpr_with_alias(pc, r15);
+	u32_t xpsr;
+};
+
 struct __esf {
-	struct __basic_sf {
-		sys_define_gpr_with_alias(a1, r0);
-		sys_define_gpr_with_alias(a2, r1);
-		sys_define_gpr_with_alias(a3, r2);
-		sys_define_gpr_with_alias(a4, r3);
-		sys_define_gpr_with_alias(ip, r12);
-		sys_define_gpr_with_alias(lr, r14);
-		sys_define_gpr_with_alias(pc, r15);
-		u32_t xpsr;
-	} basic;
+	struct __basic_sf basic;
 #if defined(CONFIG_FLOAT) && defined(CONFIG_FP_SHARING)
 	float s[16];
 	u32_t fpscr;
@@ -62,7 +64,34 @@ struct __esf {
 #endif
 };

+#if defined(CONFIG_EXTRA_EXCEPTION_INFO)
+struct __callee_saved_esf {
+	uint32_t r4;
+	uint32_t r5;
+	uint32_t r6;
+	uint32_t r7;
+	uint32_t r8;
+	uint32_t r9;
+	uint32_t r10;
+	uint32_t r11;
+	uint32_t exc_return;
+};
+
+struct __extended_esf {
+	struct __basic_sf basic;
+#if defined(CONFIG_FLOAT) && defined(CONFIG_FP_SHARING)
+	float s[16];
+	u32_t fpscr;
+	u32_t undefined;
+#endif
+	void *exception_frame_addr;
+	struct __callee_saved_esf *callee_regs;
+};
+
+typedef struct __extended_esf z_arch_esf_t;
+#else
 typedef struct __esf z_arch_esf_t;
+#endif

 extern void z_ExcExit(void);

--
2.21.0

